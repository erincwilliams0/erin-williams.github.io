////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  //edge: start === end return []; include step, increment or decrement count; if step undefined step = 1
  var output = [];
  if(start === end){
    return output;
  } 
  if(step < 1){
    return [];
  } else if(step > 1){
    for(let i = start; i <= end; i += step){
      output.push(i);
    }
    } else if(step === undefined){
      for(let i = start; i <= end; i++){
        output.push(i);
      }
    }
  
  // use for loop inputting start and end parameters increasing by step each time
    //push i into output array each iteration
   
    return output;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
//edge: if array is empty return 0
var output = 0;
if(!arr.length){
  return 0;
}
for(let i = 0; i < arr.length; i++){
  output += arr[i];
}
return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
// loop through array from end to start pushing elements into an output array each iteration
var output = [];
for(let i = arr.length - 1; i >= 0; i--){
  output.push(arr[i]);
}
return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  //edge reverse empty array
  if(!arr.length){
    return [];
  } 
  // loop over half the array using math.floor?
   for(let i = 0; i < Math.floor(arr.length / 2); i++){
    let hold = arr[i];
    arr[i] = arr[arr.length - 1 - i];
    arr[arr.length - 1 - i] = hold;
  }
  // each iteration assign arr[i] = arr[arr.length - 1 - i] and arr[arr.length - 1 - i] = arr[i]
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let list = null;
  // loop through array backwards assigning list the value of {value: arr[i], rest: list}
  for(let i = arr.length - 1; i >= 0; i--){
    list = {
      value: arr[i],
      rest: list
    }
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
let output = [];
  for(let i = list; i; i = i.rest){
    output.push(i.value)
}
return output;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(elem, list) {
  return {
    value: elem,
    rest: list
  }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  let output = [];
  for(let i = list; i; i = i.rest){
    output.push(i.value)
  }
  return output[num]
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  // first use conditional and test for deep equal
 if((typeof val1 === 'object' && val1 !== null)&&(typeof val2 === 'object' && val2 !== null)){
  
 }else {
   return val1 === val2
 }
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
